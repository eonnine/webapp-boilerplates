# source: http://localhost:8080/graphql
# timestamp: Thu Mar 14 2019 20:48:53 GMT+0900 (Korean Standard Time)

scalar DateTime

type DateTimeRange {
  from: DateTime!
  to: DateTime!
}

input DateTimeRangePayload {
  from: DateTime!
  to: DateTime!
}

"""사용량분석 - cbl"""
type DrCblAnalysis {
  """시작시간"""
  from: DateTime!

  """종료시간"""
  to: DateTime!

  """사용량"""
  usage: Float!

  """cbl"""
  cbl: Float!

  """cbl - 사용량"""
  cblDiffUsage: Float!

  """cbl - 적용전력"""
  cblDiffContractCapacity: Float!
}

"""사용량분석 - cbl 통계"""
type DrCblAnalysisStatistics {
  """cbl 목록"""
  list: [DrCblAnalysis!]!
}

"""CBL 타입"""
enum DrCBLType {
  MAX45
  MID610
}

"""참여고객"""
type DrCustomer implements Node {
  """참여고객ID"""
  id: ID!

  """참여고객 명"""
  name: String!

  """요금제"""
  feePlan: String!

  """한전계약용량"""
  kepcoContractCapacity: Float!

  """계약용량"""
  contractCapacity: Float!

  """적용전력"""
  applyCapacity: Float!

  """금일 급전가능성"""
  kpxPowerCondition: DrKpxPowerCondition!

  """사용량"""
  powerUsages(meterType: DrMeterType!, wattageInterval: DrWattageInterval!): DrPowerUsages!

  """금일 감축이벤트"""
  todayReductionEvent(reductionType: DrReductionType): DrReductionEvent!

  """감축이벤트 한건 선택"""
  reductionEvent(id: ID!): DrReductionEvent!

  """감축이벤트 목록"""
  reductionEvents(from: DateTime, to: DateTime): DrReductionEvents!

  """사용량분석 - 사용량"""
  usageAnalysisStatistics(from: DateTime!, to: DateTime!, meterType: DrMeterType!): DrUsageAnalysisStatistics!

  """사용량분석 - cbl"""
  cblAnalysisStatistics(from: DateTime!, to: DateTime!, meterType: DrMeterType!): DrCblAnalysisStatistics!

  """사용량분석 - 이용시간"""
  usageTimeAnalysisStatistics(from: DateTime!, to: DateTime!, meterType: DrMeterType!): DrUsageTimeAnalysisStatistics!

  """사용량분석 - 이용시간 최대수요"""
  maxDemandAnalysisStatistics(from: DateTime!, to: DateTime!, meterType: DrMeterType!): DrMaxDemandAnalysisStatistics!

  """사용량분석 - 참여고객 평균"""
  customerAnalysisStatistics(from: DateTime!, to: DateTime!): DrCustomerAnalysisStatistics!

  """계획감축 입찰신청"""
  reductionBidding(biddingDate: DateTime!, referenceDate: DateTime!): DrReductionBidding!

  """계획감축 입찰결과"""
  reductionBids(from: DateTime!, to: DateTime!): DrReductionBids!

  """계획감축 입찰 한건"""
  reductionBid(id: ID!): DrReductionBid!

  """공지사항 목록"""
  notices: [DrNotice!]!

  """공지사항 한건"""
  notice(id: ID!): DrNotice!

  """알림내역"""
  notifications: [DrNotification!]!

  """영업담당자"""
  representative: [DrSalesRepresentative!]!
}

"""사용량분석 - 참여고객 평균"""
type DrCustomerAnalysis {
  """현재 참여고객"""
  thisCustomer: Float!

  """같은 업종 참여고객"""
  sameIndustryCustomer: Float!

  """비슷한 계약용량 참여고객"""
  similarCapacityCustomer: Float!
}

"""사용량분석 - 참여고객 평균 통계"""
type DrCustomerAnalysisStatistics {
  """계약용량 평균"""
  contractCapacity: DrCustomerAnalysis!

  """적용전력 평균"""
  applyCapacity: DrCustomerAnalysis!

  """수요감축요청 발령시간대 cbl 평균"""
  averageDrCbl: DrCustomerAnalysis!
}

"""참여고객 적용전력 수정"""
input DrCustomerPayload {
  """적용전력"""
  applyCapacity: Float!
}

"""kpx 전력현황"""
type DrKpxPowerCondition {
  """날씨"""
  weather: Weather!

  """금일 급전 가능성"""
  todayDrPossibility: DrKpxTodayDrPossibility!

  """최대부하전망 - 상태"""
  maxLoadForecastStatus: DrKpxPowerConditionStatus!

  """최대부하전망 - 피크예상시간"""
  maxLoadForecastPeakExpectationTime: String!

  """최대부하전망 - 최대부하"""
  maxLoadForecastMaxLoad: Float!

  """최대부하전망 - 공급예비력"""
  maxLoadForecastSupplyReservePower: Float!

  """최대부하전망 - 공급예비율"""
  maxLoadForecastSupplyReserveRate: Float!

  """실시간 전력수급현황 - 상태"""
  realTimePowerSupplyStatus: DrKpxPowerConditionStatus!

  """실시간 전력수급현황 - 현재부하"""
  realTimePowerSupplyCurrentLoad: Float!

  """실시간 전력수급현황 - 공급예비력"""
  realTimePowerSupplyReservePower: Float!

  """실시간 전력수급현황 - 공급예비율"""
  realTimePowerSupplyReserveRate: Float!

  """전력수급 대책기간 - 기간"""
  powerSupplyMeasPeriod: String!

  """전력수급 대책기간 - 목표수요"""
  powerSupplyMeasTargetDemand: String!

  """전력수급 대책기간 - 예비력"""
  powerSupplyMeasReservePower: String!
}

"""kpx 전력현황 상태"""
enum DrKpxPowerConditionStatus {
  """정상"""
  NORMAL

  """준비"""
  READY

  """관심"""
  ATTENTION

  """주의"""
  ALERT

  """경계"""
  WARNING

  """심각"""
  EMERGENCY
}

"""금일 급전발령 가능성"""
enum DrKpxTodayDrPossibility {
  """높음"""
  HIGH

  """낮음"""
  LOW
}

"""사용량분석 - 이용시간 최대수요"""
type DrMaxDemandAnalysis {
  """시작시간"""
  hourRange: String!

  """적용전력초과 횟수"""
  applyCapacityExcessCount: Int!

  """적용전력근접 횟수"""
  applyCapacityProximityCount: Int!
}

"""사용량분석 - 이용시간 최대수요 통계"""
type DrMaxDemandAnalysisStatistics {
  """주의시간대"""
  attentionHourRange: String!

  """최대수요 횟수 목록"""
  list: [DrMaxDemandAnalysis!]!
}

"""검침데이터 종류"""
enum DrMeterType {
  ONE
  FIVE
  FIFTEEN
}

"""공지사항"""
type DrNotice implements Node {
  id: ID!
  from: DateTime!
  title: String!
  content: String!
}

"""유저 알림"""
type DrNotification implements Node {
  id: ID!
  from: DateTime!
  title: String!
  content: String!
}

"""전력사용량"""
type DrPowerUsage {
  """시작일"""
  from: DateTime!

  """종료일"""
  to: DateTime!

  """cbl"""
  cbl: Float!

  """사용량"""
  usage: Float!

  """목표사용량"""
  targetUsage: Float!

  """목표대비사용량"""
  targetCompareUsage: Float!

  """잔여사용량"""
  remainUsage: Float!

  """목표감축량"""
  targetReductionWattage: Float!

  """감축이행량"""
  reductionWattage: Float!

  """감축률"""
  reductionRate: Float!

  """누적감축률"""
  accumulationReductionRate: Float!
}

"""전력사용량 목록"""
type DrPowerUsages {
  total: DrPowerUsage!
  list: [DrPowerUsage!]!
}

"""계획감축 입찰 한건"""
type DrReductionBid implements Node {
  """계획감축 입찰 번호"""
  id: ID!

  """시작일"""
  from: DateTime!

  """종료일"""
  to: DateTime!

  """계획감축 입찰일"""
  reductionBidDate: DateTime!

  """입찰상태"""
  bidStatus: DrReductionBidStatus!

  """낙찰시간"""
  winningBidHour: Float!

  """낙찰용량"""
  winningBidWattage: Float!

  """입찰시간"""
  biddingHour: Float!

  """입찰용량"""
  biddingWattage: Float!

  """시간별 입찰내용"""
  intervals: [DrReductionBidInterval!]!
}

"""계획감축 입찰신청 조회"""
type DrReductionBidding {
  """입찰일"""
  biddingDate: DateTime!

  """참고일"""
  referenceDate: DateTime!

  """총 입찰시간"""
  biddingHour: Float!

  """총 입찰용량"""
  biddingWattage: Float!

  """시간별 입찰내용"""
  intervals: [DrReductionBidInterval!]!
}

"""계획감축 입찰 인터벌"""
type DrReductionBidInterval {
  """시작시간"""
  from: DateTime!

  """종료시간"""
  to: DateTime!

  """cbl"""
  cbl: Float!

  """입찰용량"""
  biddingWattage: Float!

  """낙찰용량"""
  winningBidWattage: Float!

  """낙찰단가"""
  winningBidSmp: Float!

  """참고일 전력사용량"""
  referenceDateUsage: Float!

  """오늘의 smp"""
  todaySmp: Float!
}

"""계획감축 인터벌 입력"""
input DrReductionBidIntervalPayload {
  """시작일"""
  from: DateTime!

  """종료일"""
  to: DateTime!

  """입찰용량"""
  binddingWattage: Float!

  """cbl"""
  cbl: Float!
}

"""계획감축 입력"""
input DrReductionBidPayload {
  """입찰일"""
  reductionBidDate: DateTime!

  """참고일"""
  referenceDate: DateTime!

  """낙찰시간"""
  biddingHour: Float!

  """낙찰용량"""
  biddingWattage: Float!

  """시간별 입찰내용"""
  intervals: [DrReductionBidIntervalPayload!]!
}

"""계획감축 입찰 목록"""
type DrReductionBids {
  """계획감축 입찰 통계"""
  statistics: DrReductionBidStatistics!

  """계획감축 입찰 목록"""
  list: [DrReductionBid!]!
}

"""계획감축 입찰 통계"""
type DrReductionBidStatistics {
  """낙찰율"""
  winningBidRate: Float!

  """총 입찰 횟수"""
  totalCount: Int!

  """낙찰 횟수"""
  winningBidCount: Int!

  """유찰 횟수"""
  failureBidCount: Int!

  """평균 입찰용량"""
  averageBiddingWattage: Float!

  """평균 낙찰용량"""
  averageWinningBidWattage: Float!

  """평균 낙찰단가"""
  averageWinningBidSmp: Float!
}

"""계획감축 입찰 상태"""
enum DrReductionBidStatus {
  """낙찰"""
  WINNINGBID

  """유찰"""
  FAILUREBID

  """입찰"""
  BIDDING

  """신청"""
  REQUEST
}

"""감축이벤트"""
type DrReductionEvent implements Node {
  """감축이벤트 번호"""
  id: ID!

  """시작일"""
  from: DateTime!

  """종료일"""
  to: DateTime!

  """지속시간(분)"""
  durationMinute: Int!

  """cbl"""
  cbl: Float!

  """사용량"""
  usage: Float!

  """목표사용량"""
  targetUsage: Float!

  """목표대비사용량"""
  targetCompareUsage: Float!

  """목표감축량"""
  targetReductionWattage: Float!

  """감축이행량"""
  reductionWattage: Float!

  """감축률"""
  reductionRate: Float!

  """누적감축률"""
  accumulationReductionRate: Float!

  """감축 구분"""
  reductionType: DrReductionType!

  """감축 종류"""
  reductionName: DrReductionName!

  """감축실적 등급"""
  reductionGrade: DrReductionGrade!

  """성공여부"""
  reductionResult: Boolean!

  """감축이벤트 인터벌 한건"""
  interval(no: Int!): DrReductionEventInterval!

  """감축이벤트 인터벌 목록"""
  intervals: [DrReductionEventInterval!]!

  """감축전력량"""
  powerUsages(meterType: DrMeterType!, wattageInterval: DrWattageInterval!): DrPowerUsages!
}

"""감축이벤트 인터벌"""
type DrReductionEventInterval {
  """인터벌 순번"""
  no: Int!

  """시작일"""
  from: DateTime!

  """종료일"""
  to: DateTime!

  """지속시간(분)"""
  durationMinute: Int!

  """cbl"""
  cbl: Float!

  """사용량"""
  usage: Float!

  """목표사용량"""
  targetUsage: Float!

  """목표대비사용량"""
  targetCompareUsage: Float!

  """목표감축량"""
  targetReductionWattage: Float!

  """감축이행량"""
  reductionWattage: Float!

  """감축률"""
  reductionRate: Float!

  """누적감축률"""
  accumulationReductionRate: Float!

  """성공여부"""
  reductionResult: Boolean!

  """감축전력량"""
  powerUsages(meterType: DrMeterType!, wattageInterval: DrWattageInterval!): DrPowerUsages!
}

"""감축이벤트 목록"""
type DrReductionEvents {
  """감축이벤트 통계"""
  statistics: DrReductionEventStatistics!

  """감축이벤트 목록"""
  list: [DrReductionEvent!]!
}

"""감축이벤트 통계"""
type DrReductionEventStatistics {
  """총 감축횟수"""
  totalReductionCount: Int!

  """등록시험횟수"""
  registrationReductionCount: Int!

  """수요감축요청횟수"""
  dispatchedReductionCount: Int!

  """감축시험횟수"""
  testReductionCount: Int!

  """계획감축횟수"""
  scheduledReductionCount: Int!

  """성공횟수"""
  successCount: Int!

  """실패횟수"""
  failCount: Int!

  """총 감축량"""
  reductionWattage: Float!

  """평균 감축률"""
  reductionRate: Float!

  """총 감축시간"""
  durationMinute: Int!
}

"""감축실적 등급"""
enum DrReductionGrade {
  """매우 우수"""
  GOOD

  """보통"""
  NORMAL

  """실패"""
  FAIL
}

"""감축이벤트 명?"""
enum DrReductionName {
  """수요감축요청 (Dispatched Reduction)"""
  DispatchedReduction

  """등록시험 (Registration Reduction)"""
  RegistrationReduction

  """감축시험 (Test Reduction)"""
  TestReduction

  """계획감축 (Scheduled Reduction)"""
  ScheduledReduction
}

"""감축이벤트 구분"""
enum DrReductionType {
  """수요감축요청, 등록시험, 감축시험"""
  DR

  """계획감축"""
  SR
}

"""영업담당자"""
type DrSalesRepresentative {
  """영업담당자 이름"""
  name: String!

  """영업담당자 폰번호"""
  mobile: String!
}

"""사용량분석 - 사용량"""
type DrUsageAnalysis {
  from: DateTime!
  to: DateTime!

  """사용량"""
  usage: Float!

  """최대수요전력"""
  maxDemandUsage: Float!

  """적용전력대비"""
  applyCapacityCompare: Float!
}

"""사용량분석 - 사용량 통계"""
type DrUsageAnalysisStatistics {
  """최대수요전력"""
  maxDemandUsage: Float!

  """최대수요 시작시간대"""
  maxDemandFrom: DateTime!

  """최대수요 종료시간대"""
  maxDemandTo: DateTime!

  """적용전력 근접횟수"""
  applyCapacityProximityCount: Int!

  """사용량 목록"""
  list: [DrUsageAnalysis!]!
}

"""사용량분석 - 이용시간"""
type DrUsageTimeAnalysis {
  """시작일"""
  from: DateTime!

  """종료일"""
  to: DateTime!

  """평균사용시간"""
  usageHour: Float!
}

"""사용량분석 - 이용시간 통계"""
type DrUsageTimeAnalysisStatistics {
  """평균 전력이용시간"""
  usageHour: Float!

  """전력이용시간 목록"""
  list: [DrUsageTimeAnalysis!]!
}

"""유저"""
type DrUser implements Node {
  id: ID!
  userId: ID!
  name: String!
  mobile: String!
  email: String!
  notificationSetting: DrUserNotificationSetting!
  managerId: ID
  customerId: ID
}

"""유저 알림 수신 설정"""
type DrUserNotificationSetting {
  """수요감축요청 지시"""
  dispatchedReductionOrder: Boolean!

  """계획감축 대기"""
  scheduledReductionReady: Boolean!

  """수요감축요청 발령예상 알림"""
  dispatchedReductionPrediction: Boolean!
}

"""유저 알림 수신 설정 생성/수정 양식"""
input DrUserNotificationSettingPayload {
  """수요감축요청 지시"""
  dispatchedReductionOrder: Boolean!

  """계획감축 대기"""
  scheduledReductionReady: Boolean!

  """수요감축요청 발령예상 알림"""
  dispatchedReductionPrediction: Boolean!
}

"""검침데이터 인터벌"""
enum DrWattageInterval {
  FIVE
  FIFTEEN
  HOUR
  DAY
  WEEK
  MONTH
}

"""파일"""
type File implements Node {
  id: ID!
  name: String!
  mimeType: String!
  url: String!
  tags: JSON!
  isPrivate: Boolean!
  createdAt: DateTime!
  byteSize: Int!
  size(unit: FileSizeUnit = AUTO): String!
}

enum FileSizeUnit {
  AUTO
  KB
  MB
  GB
  TB
}

interface HasTradePowerPlants {
  id: ID!
  name: String!
  powerPlantsCount: TradePowerPlantsCount!
  powerPlants: [TradePowerPlant!]!
  statistics(from: DateTime!, to: DateTime!): TradeStatistics!
}

"""통계 산출 가능한지"""
interface HasTradeStatistics {
  statistics(from: DateTime!, to: DateTime!): TradeStatistics!
}

input IssueTokensByPasswordGrantPayload {
  clientId: String!
  usernameOrEmail: String!
  password: String!
}

input IssueTokensByRefreshTokenPayload {
  clientId: String!
  refreshToken: String!
}

scalar JSON

"""위경도"""
type Location {
  """위도"""
  lat: Float!

  """경도"""
  lng: Float!

  """과거/미래 날씨 조회 및 예측"""
  weather: Weather!
}

input LocationPayload {
  """위도"""
  lat: Float!

  """경도"""
  lng: Float!
}

type Mutation {
  uploadFile(input: UploadFilePayload!): File!

  """통합 인증 토큰 발급"""
  issueTokensByPasswordGrant(input: IssueTokensByPasswordGrantPayload!): Token!

  """통합 인증 토큰 갱신"""
  issueTokensByRefreshToken(input: IssueTokensByRefreshTokenPayload!): Token!

  """통합 알림 발송 설정 생성"""
  createNotificationDispatchConfig(input: NotificationDispatchConfigPayload!): NotificationDispatchConfig!

  """통합 알림 발송 설정 수정"""
  updateNotificationDispatchConfig(input: NotificationDispatchConfigPayload!): NotificationDispatchConfig!

  """통합 알림 발송 설정 삭제"""
  deleteNotificationDispatchConfigs(ids: [ID!]!): [ID!]!

  """계정 생성"""
  createTradeUser(input: TradeUserPayload!): TradeUser!

  """계정 생성"""
  updateTradeUser(input: TradeUserPayload!): TradeUser!

  """위젯 설정 업데이트"""
  updateTradeViewerWidgetSetting(input: [String!]!): TradeUser!

  """계정 삭제"""
  deleteTradeUsers(ids: [ID!]!): [ID!]!

  """중개사업자 생성"""
  createTradeBroker(input: TradeBrokerPayload!): TradeBroker!

  """중개사업자 수정"""
  updateTradeBroker(input: TradeBrokerPayload!): TradeBroker!

  """중개사업자 삭제"""
  deleteTradeBrokers(ids: [ID!]!): [ID!]!

  """대리점 생성"""
  createTradeAgency(input: TradeAgencyPayload!): TradeAgency!

  """대리점 수정"""
  updateTradeAgency(input: TradeAgencyPayload!): TradeAgency!

  """대리점 삭제"""
  deleteTradeAgencies(ids: [ID!]!): [ID!]!

  """발전사업자 생성"""
  createTradePowerGenerator(input: TradePowerGeneratorPayload!): TradePowerGenerator!

  """발전사업자 수정"""
  updateTradePowerGenerator(input: TradePowerGeneratorPayload!): TradePowerGenerator!

  """발전사업자 삭제"""
  deleteTradePowerGenerators(ids: [ID!]!): [ID!]!

  """발전소 생성"""
  createTradePowerPlant(input: TradePowerPlantPayload!): TradePowerPlant!

  """발전소 수정"""
  updateTradePowerPlant(input: TradePowerPlantPayload!): TradePowerPlant!

  """발전사업자 삭제"""
  deleteTradePowerPlants(ids: [ID!]!): [ID!]!

  """입찰 내역 갱신"""
  updateTradeBids(input: TradeBidsPayload!): Boolean!

  """공지사항 생성"""
  createTradeNotice(input: TradeNoticePayload!): TradeNotice!

  """공지사항 수정"""
  updateTradeNotice(input: TradeNoticePayload!): TradeNotice!

  """공지사항 삭제"""
  deleteTradeNotices(ids: [ID!]!): [ID!]!

  """REC 생성/수정"""
  updateTradeRECs(inputs: [TradeRECPayload!]!): [DateTime!]!
}

interface Node {
  id: ID!
}

interface NodeList {
  offset: Int!
  limit: Int!
  total: Int!
  entries: [Node!]!
}

"""익명 알림 수신자"""
type NotificationAnonymousReceiver implements NotificationReceiver {
  mobile: String
  email: String
}

"""익명 알림 수신자 생성/수정 양식"""
input NotificationAnonymousReceiverPayload {
  mobile: String
  email: String
  extra: JSON
}

"""알림 발송 채널"""
type NotificationDispatchChannel implements Node {
  id: ID!

  """타입"""
  type: NotificationDispatchChannelType!

  """서비스 제공자 구성"""
  providerConfig: JSON!
}

"""알림 발송 채널 타입"""
enum NotificationDispatchChannelType {
  SMS
  EMAIL
}

"""알림 발송 설정"""
type NotificationDispatchConfig implements Node {
  id: ID!

  """발송 채널 (문자/이메일)"""
  channel: NotificationDispatchChannel!

  """템플릿"""
  template: NotificationTemplate

  """제목 (템플릿 변수 사용 가능)"""
  subject: String

  """내용 (템플릿 변수 사용 가능)"""
  content: String!

  """스케쥴 (예약/반복)"""
  schedule: NotificationDispatchSchedule

  """수시 발송 이벤트 구독 (Pub/Sub)"""
  subscriptionPath: String

  """수신자 설정"""
  receiver: NotificationReceiverConfig

  """발신자 (전화번호/이메일)"""
  replyTo: String

  """생성일"""
  createdAt: DateTime!

  """수정일"""
  updatedAt: DateTime

  """발송 이력"""
  histories(offset: Int = 0, limit: Int = 30): NotificationDispatchHistoryList!
}

input NotificationDispatchConfigPayload {
  id: ID

  """발송 채널"""
  channelId: ID!

  """템플릿"""
  templateId: ID

  """스케쥴"""
  schedule: NotificationDispatchSchedulePayload

  """수신자 설정"""
  receiver: NotificationReceiverConfigPayload!

  """발신자 (전화번호/이메일)"""
  replyTo: String
}

"""알림 발송 이력"""
type NotificationDispatchHistory implements Node {
  id: ID!
  configSnapshot: NotificationDispatchConfig!
  createdAt: DateTime!
  results(keyword: String, offset: Int = 0, limit: Int = 30): NotificationDispatchResultList!
}

"""알림 발송 이력 페이징"""
type NotificationDispatchHistoryList implements NodeList {
  offset: Int!
  limit: Int!
  total: Int!
  entries: [NotificationDispatchHistory!]!
}

"""알림 발송 개별 이력"""
type NotificationDispatchResult implements Node {
  id: ID!

  """제목 (이메일)"""
  subject: String

  """내용 (템플릿 반영)"""
  content: String!

  """상태"""
  status: NotificationDispatchResultStatus!

  """오류"""
  error: JSON

  """예약된 시각"""
  scheduledAt: DateTime!

  """발송 시각"""
  dispatchedAt: DateTime!

  """수신자"""
  receiver: NotificationReceiver!
}

"""알림 발송 개별 이력 페이징"""
type NotificationDispatchResultList implements NodeList {
  offset: Int!
  limit: Int!
  total: Int!
  scheduled: Int!
  succeed: Int!
  failed: Int!
  entries: [NotificationDispatchResult!]!
}

"""알림 발송 개별 이력 상태"""
enum NotificationDispatchResultStatus {
  SCHEDULED
  SUCCEED
  FAILED
}

"""알림 스케쥴"""
type NotificationDispatchSchedule {
  """cron syntax"""
  cron: String

  """cron syntax를 자연어"""
  cronHumanReadable: String

  """타입"""
  type: NotificationDispatchScheduleType!

  """상태"""
  status: NotificationDispatchScheduleStatus!
}

"""알림 스케쥴 생성/수정 양식"""
input NotificationDispatchSchedulePayload {
  """cron syntax"""
  cron: String

  """타입"""
  type: NotificationDispatchScheduleType!
}

"""알림 스케쥴 상태"""
enum NotificationDispatchScheduleStatus {
  """발송 예약"""
  SCHEDULED

  """발송 완료"""
  FINISHED

  """예약 비활성화"""
  DISABLED
}

"""알림 스케쥴 타입"""
enum NotificationDispatchScheduleType {
  """일회 발송 예약"""
  ONCE

  """주기적으로 발송 예약"""
  PERIODICALLY
}

"""알림 수신자 인터페이스"""
interface NotificationReceiver {
  mobile: String
  email: String
}

"""알림 수신자 설정"""
type NotificationReceiverConfig {
  """수신자 그룹"""
  groups: [NotificationReceiverGroup!]!

  """익명 수신자"""
  anonymous: [NotificationAnonymousReceiver!]!

  """전체 수신자"""
  all(offset: Int = 0, limit: Int = 30): NotificationReceiverList!
}

"""알림 수신자 설정 생성/수정 양식"""
input NotificationReceiverConfigPayload {
  groupIds: [ID!]!
  anonymous: [NotificationAnonymousReceiverPayload!]!
}

"""알림 수신자 그룹 (내부 시스템에서 생성되며, 발송/조회시 동적으로 수신자를 요청)"""
type NotificationReceiverGroup {
  id: ID!
  name: String!
  receivers(offset: Int = 0, limit: Int = 30): NotificationReceiverList!
}

"""알림 수신자 목록"""
interface NotificationReceiverList {
  offset: Int!
  limit: Int!
  total: Int!
  entries: [NotificationReceiver!]!
}

"""알림 내용 템플릿"""
type NotificationTemplate {
  id: ID!

  """이름"""
  name: String!

  """설명"""
  description: String!

  """템플릿 변수들"""
  variables: [NotificationTemplateVariable!]!

  """템플릿에 사용 가능한 수신자 그룹들"""
  candiateReceiverGroups: [NotificationReceiverGroup!]!

  """예약/주기적 발송 가능한지"""
  schedulable: Boolean!

  """생성일"""
  createdAt: DateTime!

  """수정일"""
  updatedAt: DateTime
}

"""알림 내용 템플릿 변수"""
type NotificationTemplateVariable {
  label: String!
  description: String!
}

type Query {
  file(id: ID!, urlExpiryHours: Int = 2): File!
  drViewer: DrUser
  drCustomer(id: ID!): DrCustomer!

  """인증된 통합 유저"""
  viewer: User

  """통합 유저 목록 조회"""
  users(
    """아이디로 검색 (와일드카드 %)"""
    username: String

    """권한으로 검색"""
    hasRoles: [String!]
    hasEffectiveRoles: [String!]
    offset: Int = 0
    limit: Int = -1
    orderBy: String = "identity.username"
    orderByDesc: Boolean = true
  ): UserList!

  """통합 알림 발송 설정 조회"""
  notificationDispatchConfigs(
    """주기적 발송만 조회"""
    onlyPeriodically: Boolean = false
  ): [NotificationDispatchConfig!]!

  """통합 알림 발송 이력 조회"""
  notificationDispatchHistories(offset: Int = 0, limit: Int = 30): NotificationDispatchHistoryList!
  tradeRoles: [String!]!
  tradePowerPlantFacilityTypes: [TradePowerPlantFacilityType!]!
  tradeSMPBuyers: [TradeSMPBuyer!]!
  tradeViewer: TradeUser
  tradeBroker(id: ID!): TradeBroker!
  tradeAgency(id: ID!): TradeAgency!
  tradePowerGenerator(id: ID!): TradePowerGenerator!
  tradePowerPlant(id: ID!): TradePowerPlant!
  tradeArea(areaId: ID!, brokerId: ID, agencyId: ID, generatorId: ID): TradeArea!
  canViewerCreateTradeNotice: Boolean!
  tradeNotices(keyword: String, offset: Int = 0, limit: Int = 30): TradeNoticeList!
  tradeNotice(id: ID!): TradeNotice!
  tradeNoticeCount: Int!
  tradeAlerts(keyword: String, offset: Int = 0, limit: Int = 30): TradeAlertList!
  tradeSMPs(from: DateTime!, to: DateTime!, interval: TradeSMPsInterval!): [TradeSMP!]!
  canViewerUpdateTradeRECs: Boolean!
  tradeRECs(from: DateTime!, to: DateTime!, interval: TradeRECsInterval!): [TradeREC!]!
}

type Subscription {
  """nothing"""
  dummy: Int
}

"""통합 인증 토큰"""
type Token {
  accessToken: String!
  refreshToken: String!
}

"""대리점"""
type TradeAgency implements Node & HasTradeStatistics & HasTradePowerPlants {
  id: ID!
  name: String!
  representativeName: String!
  representativePhone: String!
  bizRegistrationNumber: String!
  createdAt: DateTime!
  updatedAt: DateTime
  broker: TradeBroker!

  """발전정산금 수수료율(%)"""
  commissionRate: Float!
  powerGenerators: [TradePowerGenerator!]!
  powerGeneratorsCount: Int!
  powerPlantsCount: TradePowerPlantsCount!
  powerPlants: [TradePowerPlant!]!
  statistics(from: DateTime!, to: DateTime!): TradeStatistics!

  """agency 권한이 있는 유저"""
  grantedUsers: [TradeUser!]!
  canViewerDelete: Boolean!
  canViewerUpdate: Boolean!
  canViewerAddPowerGenerator: Boolean!
  canViewerAddGrantedUser: Boolean!
}

"""대리점 생성/수정 양식"""
input TradeAgencyPayload {
  id: ID

  """소속"""
  brokerId: ID!

  """대리점명"""
  name: String!

  """대표자명"""
  representativeName: String!

  """대표번호"""
  representativePhone: String!

  """사업자등록번호"""
  bizRegistrationNumber: String!

  """발전정산금 수수료율(%)"""
  commissionRate: Float!
}

"""경보"""
type TradeAlert implements Node {
  id: ID!
  powerPlant: TradePowerPlant
  type: TradeAlertType!
  sender: TradeAlertSender!
  content: String!
  createdAt: DateTime!
}

type TradeAlertList implements NodeList {
  offset: Int!
  limit: Int!
  total: Int!
  entries: [TradeAlert!]!
}

"""경보 송신자"""
enum TradeAlertSender {
  APP
  SYSTEM
}

"""경보 유형"""
enum TradeAlertType {
  WARNING
  INFO
}

"""발전소 지역별 그룹"""
type TradeArea implements Node & HasTradePowerPlants {
  """지역 코드"""
  id: ID!

  """지역명"""
  name: String!
  powerPlants: [TradePowerPlant!]!
  powerPlantsCount: TradePowerPlantsCount!
  statistics(from: DateTime!, to: DateTime!): TradeStatistics!
}

"""기간별 입찰 내역"""
type TradeBid {
  """최신 예측 발전량(kW)"""
  latestEstimatedQuantity: Float

  """초기 입찰 발전량(kW)"""
  initialEstimatedQuantity: Float

  """변경 입찰 발전량(kW)"""
  modifiedEstimatedQuantity: Float

  """입찰 기간 (시작)"""
  from: DateTime!
}

"""입찰 내역(중개사업자, 지역별, 대리점, 발전사업자 공통)"""
type TradeBids {
  """입찰량 합계"""
  total: TradeBid!

  """시간/일/월별 입찰량"""
  intervals(interval: TradeBidsInterval!): [TradeBid!]!

  """초기 입찰 가능 여부"""
  canViewerUpdateInitialBid: Boolean!
  canUpdateInitialBid: Boolean!
  canDownloadInitialBid: Boolean!

  """변경 입찰 가능 여부"""
  canViewerUpdateModifiedBid: Boolean!
  canUpdateModifiedBid: Boolean!
  canDownloadModifiedBid: Boolean!
}

enum TradeBidsInterval {
  HOUR
  DAY
  MONTH
}

"""입찰 갱신 양식"""
input TradeBidsPayload {
  """입찰일"""
  date: DateTime!

  """초기 입찰 갱신 여부"""
  updateInitialBid: Boolean!

  """변경 입찰 갱신 여부"""
  updateModifiedBid: Boolean!

  """입찰자 정보"""
  areaID: ID
  brokerId: ID
  agencyId: ID
  powerGeneratorId: ID
  powerPlantId: ID
}

"""중개사업자"""
type TradeBroker implements Node & HasTradeStatistics & HasTradePowerPlants {
  id: ID!
  name: String!
  bizRegistrationNumber: String!
  createdAt: DateTime!
  updatedAt: DateTime
  areas: [TradeArea!]!
  agencies: [TradeAgency!]!
  powerPlants: [TradePowerPlant!]!
  agenciesCount: Int!
  powerGeneratorsCount: Int!
  powerPlantsCount: TradePowerPlantsCount!
  statistics(from: DateTime!, to: DateTime!): TradeStatistics!

  """master 또는 manager 권한이 있는 유저"""
  grantedUsers: [TradeUser!]!
  canViewerDelete: Boolean!
  canViewerUpdate: Boolean!
  canViewerAddAgency: Boolean!
  canViewerAddGrantedUser: Boolean!
}

"""중개사업자 생성/수정 양식"""
input TradeBrokerPayload {
  id: ID

  """중개사업자명"""
  name: String!

  """사업자등록번호"""
  bizRegistrationNumber: String!
}

"""공지사항"""
type TradeNotice implements Node {
  id: ID!
  broker: TradeBroker
  author: TradeUser!
  title: String!

  """text/html"""
  content: String!
  createdAt: DateTime!
  attachments: [File!]!
  hasAttachment: Boolean!
  hitCount: Int!
  canViewerDelete: Boolean!
  canViewerUpdate: Boolean!
}

"""공지사항 페이징 목록"""
type TradeNoticeList implements NodeList {
  offset: Int!
  limit: Int!
  total: Int!
  entries: [TradeNotice!]!
}

"""공지사항 생성/수정 양식"""
input TradeNoticePayload {
  id: ID
  title: String!
  content: String!
  attachmentIds: [ID!]!
}

"""발전량"""
type TradePowerGeneration {
  """실측 발전량(kWh)"""
  quantity: Float

  """실측 발전 시간(h)"""
  measuredHours: Float

  """측정 시각"""
  from: DateTime!

  """평균 발전량(kWh)"""
  averageQuantity: Float

  """예측 발전량(kWh)"""
  estimatedQuantity: Float

  """예측 오차율(%)"""
  estimationErrorRate: Float

  """발전 효율(%)"""
  efficiency: Float
}

"""발전 통계(중개사업자, 대리점, 발전사업자, 발전소 공통)"""
type TradePowerGenerations {
  """총 설비 용량(kW)"""
  capacity: Float!

  """순간 발전량(kW)"""
  realTimeQuantity: Float!

  """순간 발전 효율(%)"""
  realTimeEfficiency: Float!

  """누적 발전량"""
  total: TradePowerGeneration!

  """분/시간/일/월별 발전량"""
  intervals(interval: TradePowerGenerationsInterval!): [TradePowerGeneration!]!
}

enum TradePowerGenerationsInterval {
  MINUTE
  HOUR
  DAY
  MONTH
}

"""발전사업자"""
type TradePowerGenerator implements Node & HasTradeStatistics & HasTradePowerPlants {
  id: ID!
  name: String!
  representativeName: String!
  representativePhone: String!
  bizRegistrationNumber: String!
  createdAt: DateTime!
  updatedAt: DateTime
  agency: TradeAgency!

  """발전정산금 수수료율(%)"""
  commissionRate: Float!
  powerPlants: [TradePowerPlant!]!
  powerPlantsCount: TradePowerPlantsCount!
  statistics(from: DateTime!, to: DateTime!): TradeStatistics!

  """member 권한이 있는 유저"""
  grantedUsers: [TradeUser!]!
  canViewerDelete: Boolean!
  canViewerUpdate: Boolean!
  canViewerAddPowerPlant: Boolean!
  canViewerAddGrantedUser: Boolean!
}

"""발전사업자 생성/수정 양식"""
input TradePowerGeneratorPayload {
  id: ID

  """소속"""
  agencyId: ID!

  """발전사업자명"""
  name: String!

  """대표자명"""
  representativeName: String!

  """대표번호"""
  representativePhone: String!

  """사업자등록번호"""
  bizRegistrationNumber: String!

  """발전정산금 수수료율(%)"""
  commissionRate: Float!
}

"""발전소"""
type TradePowerPlant implements Node & HasTradeStatistics {
  id: ID!
  powerGenerator: TradePowerGenerator!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!

  """주소"""
  address: String!

  """위경도"""
  location: Location!

  """법정동 코드"""
  bcode: String!

  """발전소 설비 정보"""
  facility: TradePowerPlantFacility!

  """발전소 매매계약 정보"""
  contract: TradePowerPlantContract!

  """소규모 중개사업 참여 정보"""
  tradingEnabled: Boolean!
  statistics(from: DateTime!, to: DateTime!): TradeStatistics!

  """발전소 상태"""
  status: TradePowerPlantStatus!
  canViewerUpdate: Boolean!
  canViewerDelete: Boolean!

  """발전소 이미지 및 CCTV 영상"""
  image: File!
  video: File!

  """발전소 발전량 비교"""
  generationComparison: TradePowerPlantGenerationComparison!
}

"""발전소 매매계약 정보"""
type TradePowerPlantContract implements Node {
  id: ID!

  """SMP 구매처"""
  smpBuyer: TradeSMPBuyer!

  """REC 가중치"""
  recWeight: Float!

  """REC 고정가격 계약 (해당 없으면 현물 거래)"""
  recFixedContract: TradePowerPlantRECFixedContract
}

"""발전소 매매계약 정보 생성/수정 양식"""
input TradePowerPlantContractPayload {
  id: ID

  """SMP 구매처"""
  smpBuyer: TradeSMPBuyer!

  """REC 가중치"""
  recWeight: Float!

  """REC 고정가격 계약 (해당 없으면 현물 거래)"""
  recFixedContract: TradePowerPlantRECFixedContractPayload
}

"""발전소 설비 정보"""
type TradePowerPlantFacility implements Node {
  """ID; 포스코 API의 경우 Site ID"""
  id: ID!

  """종류"""
  type: TradePowerPlantFacilityType!

  """제조사"""
  manufacturer: TradePowerPlantFacilityManufacturer!

  """시공사"""
  builder: TradePowerPlantFacilityBuilder!

  """설비 용량"""
  capacity: Float!
}

"""발전소 설비 시공사"""
type TradePowerPlantFacilityBuilder implements Node {
  id: ID!
  name: String!
}

"""발전소 설비 제조사"""
type TradePowerPlantFacilityManufacturer implements Node {
  id: ID!
  name: String!
}

"""발전소 설비 정보 생성/수정 양식"""
input TradePowerPlantFacilityPayload {
  """ID; 포스코 API의 경우 Site ID"""
  id: ID!

  """종류"""
  typeId: ID!

  """제조사"""
  manufacturerId: ID!

  """시공사"""
  builderId: ID!

  """설비용량"""
  capacity: Float!
}

"""발전소 설비 종류"""
type TradePowerPlantFacilityType implements Node {
  id: ID!
  name: String!
  manufacturers: [TradePowerPlantFacilityManufacturer!]!
  builders: [TradePowerPlantFacilityBuilder!]!
}

"""발전소 발전량 비교"""
type TradePowerPlantGenerationComparison {
  """비슷한 설비용량 평균 실시간 발전량"""
  nearCapacityQuantity: Float!
  nearCapacityEfficiency: Float!

  """지역내 발전소 평균 실시간 발전량"""
  inAreaQuantity: Float!
  inAreaEfficiency: Float!

  """내 발전소 실시간 발전량"""
  selfQuantity: Float!
  selfEfficiency: Float!
}

"""발전소 생성/수정 양식"""
input TradePowerPlantPayload {
  id: ID

  """소속"""
  powerGeneratorId: ID!

  """발전소명"""
  name: String!

  """주소"""
  address: String!

  """법정동코드 10자리"""
  bcode: String!

  """위경도"""
  location: LocationPayload!

  """설비 정보"""
  facility: TradePowerPlantFacilityPayload!

  """매매 계약 정보"""
  contract: TradePowerPlantContractPayload!

  """소규모 전력중개시장 참여 정보"""
  tradingEnabled: Boolean!

  """이미지"""
  image: UploadingFile
}

"""REC 고정 가격 계약 정보"""
type TradePowerPlantRECFixedContract {
  """계약 기간"""
  range: DateTimeRange!

  """단위 가격 (원/REC)"""
  unitPrice: Float!

  """판매가 산정시 REC 가중치 적용 여부"""
  weightApplied: Boolean!
}

"""REC 고정 가격 계약 정보 생성/수정 양식"""
input TradePowerPlantRECFixedContractPayload {
  """계약 기간"""
  range: DateTimeRangePayload!

  """단위 가격 (원/REC)"""
  unitPrice: Float!

  """판매가 산정시 REC 가중치 적용 여부"""
  weightApplied: Boolean!
}

"""발전소 운용 상태별 카운트"""
type TradePowerPlantsCount {
  total: Int!
  good: Int!
  bad: Int!
  maintenance: Int!
  building: Int!
  termination: Int!
}

"""발전소 운용 상태"""
enum TradePowerPlantStatus {
  GOOD
  BAD
  MAINTENANCE
  BUILDING
  TERMINATION
}

"""REC 가격"""
type TradeREC {
  from: DateTime!

  """육지 가격"""
  minPrice: Float
  averagePrice: Float
  maxPrice: Float

  """제주도 가격"""
  jejuMinPrice: Float
  jejuAveragePrice: Float
  jejuMaxPrice: Float
}

"""REC 가격 입력/수정 양식"""
input TradeRECPayload {
  """일자"""
  date: DateTime!

  """육지 가격"""
  minPrice: Float
  averagePrice: Float
  maxPrice: Float

  """제주도 가격"""
  jejuMinPrice: Float
  jejuAveragePrice: Float
  jejuMaxPrice: Float
}

"""REC 조회 단위"""
enum TradeRECsInterval {
  """주어진 기간에 대해 일별 REC 가격 제공"""
  DAY

  """주어진 기간에 대해 월별 REC 가격 제공"""
  MONTH
}

"""유저 역할"""
enum TradeRole {
  super
  master
  manager
  agency
  member
}

"""정산 내역 (기간)"""
type TradeSettlement {
  """정산 기간 (시작)"""
  from: DateTime!

  """실측 정산금 (CP+SMP+REC; 원)"""
  totalAdjustedPrice: Float

  """실측 중개 수수료 (원)"""
  totalCommissionPrice: Float

  """초기 입찰 (kW)"""
  initialBidQuantity: Float

  """변경 입찰 (kW)"""
  modifiedBidQuantity: Float

  """평균 입찰 (kW)"""
  averageBidQuantity: Float

  """실측 발전량 (kW)"""
  measuredQuantity: Float

  """평가대상여부"""
  cpIsApplied: Boolean!

  """초기 MAPE"""
  cpInitialMAPE: Float

  """변경 MAPE"""
  cpModifiedMAPE: Float

  """평균 MAPE"""
  cpAverageMAPE: Float

  """초기 FAF"""
  cpInitialFAF: Float

  """변경 FAF"""
  cpModifiedFAF: Float

  """평균 FAF"""
  cpAverageFAF: Float

  """예측제고단가"""
  cpUnitPrice: Float

  """초기 정산금"""
  cpInitialAdjustedPrice: Float

  """변경 정산금"""
  cpModifiedAdjustedPrice: Float

  """평균 정산금"""
  cpAverageAdjustedPrice: Float

  """실측 정산금"""
  cpAdjustedPrice: Float

  """SMP 단가 (원/kWh)"""
  smpUnitPrice: Float

  """초기 정산금"""
  smpInitialAdjustedPrice: Float

  """변경 정산금"""
  smpModifiedAdjustedPrice: Float

  """실측 정산금"""
  smpAdjustedPrice: Float

  """초기 REC (개)"""
  recInitialAmount: Float

  """변경 REC (개)"""
  recModifiedAmount: Float

  """실측 REC (개)"""
  recMeasuredAmount: Float

  """가중치 반영 REC (개)"""
  recWeightAppliedAmount: Float

  """REC 가격 (원/MWh)"""
  recUnitPrice: Float

  """REC 정산금 (원)"""
  recAdjustedPrice: Float
}

"""정산 내역 (중개사업자, 대리점, 발전사업자, 발전소 공통)"""
type TradeSettlements {
  total: TradeSettlement!
  intervals(interval: TradeSettlementsInterval!): [TradeSettlement!]!
}

"""정산 기간"""
enum TradeSettlementsInterval {
  HOUR
  DAY
  MONTH
  YEAR
}

"""SMP"""
type TradeSMP {
  from: DateTime!

  """육지 가격"""
  price: Float

  """제주도 가격"""
  jejuPrice: Float
}

"""발전소 SMP 구매처"""
enum TradeSMPBuyer {
  KEPCO
  KPX
}

"""SMP 조회 단위"""
enum TradeSMPsInterval {
  """주어진 기간에 대해 시간별 SMP 제공"""
  HOUR

  """주어진 기간에 대해 일별 SMP 제공"""
  DAY

  """주어진 기간에 대해 월별 SMP 제공"""
  MONTH

  """주어진 기간 동안의 24시간별 평균 SMP 제공"""
  HOURLY_AVERAGE
}

type TradeStatistics {
  generations: TradePowerGenerations!
  bids: TradeBids!
  settlements(cpUnitPrice: Float): TradeSettlements!
  from: DateTime!
  to: DateTime!
}

"""유저"""
type TradeUser implements Node {
  id: ID!
  email: String!
  hasEmailVerified: Boolean!
  hasTemporaryPassword: Boolean!
  name: String!
  mobile: String!
  notificationSetting: TradeUserNotificationSetting!
  widgetSetting: [String!]!
  role: TradeRole
  brokerId: ID
  agencyId: ID
  powerGeneratorId: ID
  effectiveRoles: [TradeRole!]!

  """소속 중개사업자 조회"""
  brokers: [TradeBroker!]!

  """인증된 본인인지"""
  isViewer: Boolean!
  canViewerUpdate: Boolean!
  canViewerDelete: Boolean!
}

"""유저 알림 수신 설정"""
type TradeUserNotificationSetting {
  """운영"""
  operation: Boolean!

  """회계"""
  accounting: Boolean!
}

"""유저 알림 수신 설정 생성/수정 양식"""
input TradeUserNotificationSettingPayload {
  """운영"""
  operation: Boolean!

  """회계"""
  accounting: Boolean!
}

"""유저 생성/수정 양식"""
input TradeUserPayload {
  id: ID

  """담당자명"""
  name: String!
  role: TradeRole!
  brokerId: ID
  agencyId: ID
  powerGeneratorId: ID

  """이메일"""
  email: String!

  """휴대폰번호"""
  mobile: String!

  """알림 수신설정"""
  notificationSetting: TradeUserNotificationSettingPayload!

  """새로운 패스워드"""
  newPassword: String

  """기존 패스워드"""
  currentPassword: String
}

"""uploadFile 양식"""
input UploadFilePayload {
  """파일 스트림"""
  file: UploadingFile

  """모든 타입을 허용하려면 입력하지 않거나 또는 빈 배열을 사용 할 수 있음"""
  allowedMimeTypes: [String!]

  """주의: <string, string>의 맵만 지원됨"""
  tags: JSON

  """비공개 파일은 조회시 만료 시간이 설정된 URL이 생성됨"""
  isPrivate: Boolean
}

"""파일 업로드 스트림 (supports multipart/form-data)"""
scalar UploadingFile

"""통합 유저"""
type User implements Node {
  id: ID!
  username: String!
  email: String
  hasEmailVerified: Boolean
  roles: [String!]!
  effectiveRoles: [String!]!
  attributes: JSON!
  createdAt: DateTime!
}

"""통합 유저 목록"""
type UserList implements NodeList {
  offset: Int!
  limit: Int!
  total: Int!
  entries: [User!]!
}

"""날씨"""
type Weather {
  hourly(day: DateTime!): [WeatherData!]!
}

"""날씨 데이터"""
type WeatherData {
  from: DateTime!
  status: String!
  summary: String!
  humidity: Float!
  temperature: Float!
}
